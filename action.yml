name: 'Solana Setup Action'
description: 'Reusable GitHub Action to set up a full Solana development environment'

branding:
  icon: 'package'
  color: 'blue'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
    
  solana-cli-version:
    description: 'Solana CLI version to install'
    required: false
    default: ''
    
  anchor-version:
    description: 'Anchor CLI version to install'
    required: false
    default: ''
    
  pnpm-package-manager:
    description: 'pnpm version to install'
    required: false
    default: ''
    
  yarn-package-manager:
    description: 'Yarn version to install'
    required: false
    default: ''
    
  solana-network-url:
    description: 'Solana network url to use for deployment'
    required: false
    default: 'localnet'
    
  solana-airdrop-amount:
    description: 'Amount of SOL to airdrop to the wallet (only for localnet/devnet/testnet)'
    required: false
    default: '1'
    
  solana-wallet-setup:
    description: 'Script/command to set up the wallet, airdrop SOL for testing, and deploy the contract (e.g., ./scripts/setup-wallet.sh)'
    required: false
    default: ''
    
  build-script:
    description: 'Script/command to build the project (e.g., anchor build)'
    required: false
    default: ''
    
  test-script:
    description: 'Script/command to test the project (e.g., anchor test)'
    required: false
    default: ''
    
  deploy-script:
    description: 'Script/command to deploy the project (e.g., anchor deploy)'
    required: false
    default: ''

  x-ray-enabled:
    description: 'Enable Sec3 X-Ray Analysis'
    required: false
    default: 'false'
    
  working-directory:
    description: 'Working directory for X-Ray analysis'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    # 1Ô∏è‚É£ Install required system dependencies for Solana, Anchor, hidapi, etc.
    - name: Install system dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config build-essential curl git

    # 2Ô∏è‚É£ Install Node.js
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    # 3Ô∏è‚É£ Install Solana CLI
    - name: Install Solana CLI
      shell: bash
      run: |
        if [ -n "${{ inputs.solana-cli-version }}" ]; then
          echo "Installing Solana CLI..."
          sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)"
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          solana --version
        else
          echo "Skipping Solana CLI installation as no version was provided."
        fi

    # 3Ô∏è‚É£.1 Solana Wallet Setup and Local Validator
    - name: Setup Solana Wallet & Local Validator
      shell: bash
      run: |
        solana config get
        solana config set -u ${{ inputs.solana-network-url }}
        solana-keygen new --no-bip39-passphrase
        solana address
        if [ "${{ inputs.solana-network }}" = "localnet" ]; then
          solana-test-validator --reset --quiet &
          sleep 15
          solana airdrop ${{ inputs.solana-airdrop-amount }}
          solana balance
        else
          echo "Not using local network, skipping test validator and airdrop."
        fi

    # 4Ô∏è‚É£ Install Anchor CLI via AVM
    - name: Install Anchor CLI
      shell: bash
      run: |
        if [ -n "${{ inputs.anchor-version }}" ]; then
          cargo install --git https://github.com/coral-xyz/anchor --tag ${{ inputs.anchor-version }} anchor-cli
          anchor --version
        else
          echo "Skipping Anchor CLI installation as no version was provided."
        fi

    # 5Ô∏è‚É£ Install pnpm (optional)
    - name: Install pnpm
      shell: bash
      run: |
        if [ -n "${{ inputs.pnpm-package-manager }}" ]; then
          echo "Installing pnpm..."
          npm install -g pnpm@${{ inputs.pnpm-package-manager }}
        else
          echo "Skipping pnpm installation as no version was provided."
        fi

    # 6Ô∏è‚É£ Install Yarn (optional)
    - name: Install Yarn
      shell: bash
      run: |
        if [ -n "${{ inputs.yarn-package-manager }}" ]; then
          echo "Installing Yarn..."
          npm install -g yarn@${{ inputs.yarn-package-manager }}
        else
          echo "Skipping Yarn installation as no version was provided."
        fi

    # 7Ô∏è‚É£ Install project dependencies (optional)
    - name: Install Project Dependencies
      shell: bash
      run: |
        cd "${{ inputs.working-directory }}"
        if [ -f "package.json" ]; then
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing dependencies with pnpm..."
            pnpm install
          elif [ -f "yarn.lock" ]; then
            echo "Installing dependencies with yarn..."
            yarn install
          else
            echo "Installing dependencies with npm..."
            npm install
          fi
        else
          echo "No package.json found, skipping dependency installation."
        fi

    # 8Ô∏è‚É£ Wallet setup, airdrop, and deploy (optional)
    - name: Solana Wallet Setup & Airdrop
      shell: bash
      run: |
        if [ -n "${{ inputs.solana-wallet-setup }}" ]; then
          echo "Running wallet setup: ${{ inputs.solana-wallet-setup }}"
          cd "${{ inputs.working-directory }}"
          eval "${{ inputs.solana-wallet-setup }}"
        else
          echo "Skipping wallet setup as no script was provided."
        fi

    # 9Ô∏è‚É£ Run Sec3 X-Ray analysis (optional)
    - name: Run Sec3 X-Ray
      if: ${{ inputs.x-ray-enabled == 'true' }}
      shell: bash
      run: |
        echo "Running X-Ray static analysis..."
        docker run --rm \
          --volume "${{ github.workspace }}/${{ inputs.working-directory }}:/project" \
          ghcr.io/sec3-product/x-ray:latest \
          /project

    # üîü Build step (optional)
    - name: Build Project
      shell: bash
      run: |
        if [ -n "${{ inputs.build-script }}" ]; then
          echo "Running build: ${{ inputs.build-script }}"
          cd "${{ inputs.working-directory }}"
          eval "${{ inputs.build-script }}"
        else
          echo "Skipping build step as no script was provided."
        fi

    # 1Ô∏è‚É£1Ô∏è‚É£ Test step (optional)
    - name: Test Project
      shell: bash
      run: |
        if [ -n "${{ inputs.test-script }}" ]; then
          echo "Running tests: ${{ inputs.test-script }}"
          cd "${{ inputs.working-directory }}"
          eval "${{ inputs.test-script }}"
        else
          echo "Skipping test step as no script was provided."
        fi

    # 1Ô∏è‚É£2Ô∏è‚É£ Deploy step (optional)
    - name: Deploy Project
      shell: bash
      run: |
        if [ -n "${{ inputs.deploy-script }}" ]; then
          echo "Running deploy: ${{ inputs.deploy-script }}"
          cd "${{ inputs.working-directory }}"
          eval "${{ inputs.deploy-script }}"
        else
          echo "Skipping deploy step as no script was provided."
        fi